name: Claude PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          pip install anthropic requests
          
      - name: Get changed files
        id: changed-files
        run: |
          # Get all changed files compared to main
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '\.(sql|yml|yaml|py)$' | head -20 || echo "")
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "files_count=$(echo "$CHANGED_FILES" | wc -l)" >> $GITHUB_OUTPUT
          
      - name: Claude PR Review
        if: steps.changed-files.outputs.files_count > 0
        env:
          ANTHROPIC_API_KEY: "b8081412-1bb3-6cd7-5b57-45f1d7c66f2e"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          python << 'EOF'
          import os
          import subprocess
          import anthropic
          import requests
          import json
          
          # Initialize Claude client
          client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
          
          # GitHub API setup
          github_token = os.environ['GITHUB_TOKEN']
          pr_number = os.environ['PR_NUMBER']
          repo_owner = os.environ['REPO_OWNER']
          repo_name = os.environ['REPO_NAME']
          
          headers = {
              'Authorization': f'token {github_token}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          def get_file_diff(file_path):
              """Get diff for a specific file"""
              try:
                  result = subprocess.run(
                      ['git', 'diff', 'origin/main...HEAD', '--', file_path],
                      capture_output=True, text=True, check=True
                  )
                  return result.stdout
              except subprocess.CalledProcessError:
                  return ""
          
          def get_file_content(file_path):
              """Get current file content"""
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      return f.read()
              except Exception:
                  return ""
          
          def review_file_with_claude(file_path, content, diff):
              """Get Claude's review of a file"""
              
              file_ext = file_path.split('.')[-1].lower()
              
              if file_ext == 'sql':
                  file_type = "dbt SQL model"
                  focus_areas = """
                  1. SQL syntax and dbt best practices
                  2. Performance optimization (materialization, indexes, partitioning)
                  3. Data quality and testing considerations
                  4. Security (no hardcoded secrets/credentials)
                  5. Code organization and readability
                  6. Naming conventions and documentation
                  """
              elif file_ext in ['yml', 'yaml']:
                  file_type = "dbt YAML configuration" 
                  focus_areas = """
                  1. YAML syntax and structure
                  2. dbt schema and source configurations
                  3. Test coverage and data quality checks
                  4. Model and column documentation
                  5. Freshness and loading configurations
                  """
              elif file_ext == 'py':
                  file_type = "Python script"
                  focus_areas = """
                  1. Python syntax and best practices
                  2. Code organization and structure  
                  3. Error handling and logging
                  4. Security considerations
                  5. Performance and efficiency
                  """
              else:
                  return None
              
              prompt = f"""You are reviewing a {file_type} file in a dbt data engineering project that uses:
              - Azure Synapse as the data warehouse
              - Fivetran for data ingestion
              - Power BI for reporting
              - Multi-source data integration (Cin7 Core, Xero, Shopify)
              
              Please provide a focused code review covering:
              {focus_areas}
              
              File: {file_path}
              
              Changes in this PR:
              ```diff
              {diff}
              ```
              
              Full file content:
              ```
              {content[:3000]}{'...(truncated)' if len(content) > 3000 else ''}
              ```
              
              Provide your review in this format:
              
              ## ü§ñ Claude Review: `{file_path}`
              
              ### ‚úÖ What's Good
              - [Positive aspects]
              
              ### ‚ö†Ô∏è Issues to Address  
              - [Issues that should be fixed]
              
              ### üí° Suggestions
              - [Optional improvements]
              
              ### üîß Specific Changes
              ```sql
              -- Example of improved code (if applicable)
              ```
              
              Keep feedback concise and actionable. Focus on the changes made in this PR.
              """
              
              try:
                  response = client.messages.create(
                      model="claude-3-sonnet-20240229",
                      max_tokens=1500,
                      messages=[{"role": "user", "content": prompt}]
                  )
                  return response.content[0].text
              except Exception as e:
                  return f"‚ùå Claude review failed: {str(e)}"
          
          def post_pr_comment(comment_body):
              """Post comment on PR"""
              url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{pr_number}/comments"
              data = {"body": comment_body}
              
              response = requests.post(url, headers=headers, json=data)
              return response.status_code == 201
          
          # Get changed files
          changed_files_output = """${{ steps.changed-files.outputs.changed_files }}"""
          changed_files = [f.strip() for f in changed_files_output.split('\n') if f.strip()]
          
          if not changed_files:
              print("No relevant files to review")
              exit(0)
          
          print(f"Reviewing {len(changed_files)} files with Claude...")
          
          all_reviews = []
          
          for file_path in changed_files[:10]:  # Limit to 10 files max
              if not os.path.exists(file_path):
                  continue
                  
              print(f"Reviewing: {file_path}")
              
              diff = get_file_diff(file_path)
              content = get_file_content(file_path)
              
              if diff.strip():  # Only review files that actually changed
                  review = review_file_with_claude(file_path, content, diff)
                  if review:
                      all_reviews.append(review)
          
          if all_reviews:
              # Combine all reviews into one comment
              comment_body = f"""# ü§ñ Claude Code Review
              
              Automated review of this PR's changes against `main` branch.
              
              {chr(10).join(all_reviews)}
              
              ---
              
              üí° **Tips:**
              - Address ‚ö†Ô∏è issues before merging  
              - Consider üí° suggestions for code quality
              - All üîß specific changes are optional improvements
              
              *Powered by Claude AI | Generated for PR #{pr_number}*
              """
              
              if post_pr_comment(comment_body):
                  print("‚úÖ Claude review posted successfully!")
              else:
                  print("‚ùå Failed to post Claude review")
          else:
              print("No files needed review")
              
          EOF